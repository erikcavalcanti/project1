# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  push-code:
    docker:
      - image: alpine/git:2.36.3
    steps:
      - checkout
      # - run:
      #     name: checkout
      #     command: git checkout develop
      - run:
          name: Checkout
          command: git checkout main
      - run:
          name: Add remote
          command: git remote add adobe https://erikcavalcanti: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@github.com/erikcavalcanti/consolidated.git
      - run:
          name: Set config
          command: git config --global user.email "integration@test.com" && git config --global user.name "Integration"
      - run:
          name: Push code
          command: git add .
#       - run:
#           name: Commit code
#           command: git commit -m "integration"
      - run:
          name: Push code
          command: git push adobe main --force

#           command: d=main_$(date +%Y-%m-%d) && git branch -M $d && git add . && git commit -m "integration" && git push -f adobe $d && git checkout main && git pull adobe $d && git push adobe main
  build-and-test:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/openjdk:11.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Build
          command: mvn -B -DskipTests clean package
      # Then run your tests!
      - run:
          name: Test
          command: mvn test

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
      - push-code
